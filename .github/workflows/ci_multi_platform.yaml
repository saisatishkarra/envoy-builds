name: ci_multi_platform
on: 
  workflow_dispatch:
    inputs:
      envoyTag:
        description: 'envoy tag to build'
        type: string
        default: v1.22.2
        required: false
      s3CachePrefix:
        description: 'envoy s3 cache prefix'
        type: string
        default: envoy
      noBuildxCache:
        description: 'Ignore docker buildx cache'
        type: boolean
        default: false

jobs:
  metadata:
    runs-on: ubuntu-latest
    continue-on-error: false
    outputs:
      ebToolsTag: "${{steps.eb_tools_metadata.outputs.ebToolsTag}}"
    steps:
      - name: Set envoyproxy-build-tools metadata
        id: eb_tools_metadata
        run: |
          echo "::set-output name=ebToolsTag::$(curl --fail --location --silent https://raw.githubusercontent.com/envoyproxy/envoy/${{github.event.inputs.envoyTag}}/.bazelrc | grep envoyproxy/envoy-build-ubuntu | sed -e 's#.*envoyproxy/envoy-build-ubuntu:\(.*\)#\1#' | uniq)"

  # Always prefetch bazel only for alpine
  prefetch:
    needs: metadata
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: false
      matrix:
        allow_failure: [true]
        distro: [alpine]
    continue-on-error: true
    steps:

    - name: Inspect
      run: |
        echo "Build Environment:"
        echo "envoyTag: ${{github.event.inputs.envoyTag}}"
        echo "envoyBuildToolsTag: ${{needs.metadata.outputs.ebToolsTag}}"
      
    - uses: actions/checkout@v3
    
    - uses: docker/setup-buildx-action@v2
      id: buildx
      with:
        install: true
    
    - name: Login to DockerHub
      if: success()
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.GHA_DOCKERHUB_PUSH_USER }}
        password: ${{ secrets.GHA_KONG_DOCKERHUB_PUSH_TOKEN }}

    - name: Build Envoy Deps and export
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Dockerfile
        outputs: type=docker,dest=${{env.ENVOY_DEPS_TAR}}
        no-cache: ${{github.event.inputs.noBuildxCache}}
        build-args: |
          ENVOY_BUILD_TOOLS_TAG=${{needs.metadata.outputs.ebToolsTag}}
          ENVOY_TAG=${{env.envoyTag}}
          DISTRO=${{env.distro}}
        target: envoy-deps
        cache-to: type=registry,mode=max,ref=kong/envoy-builds:envoy-deps-${{github.sha}}-${{env.envoyTag}}
        cache-from: type=registry,ref=kong/envoy-builds:envoy-deps-${{github.sha}}-${{env.envoyTag}}
        tags: kong/envoy-builds:envoy-deps-${{github.sha}}-${{env.envoyTag}}
      env:
        envoyTag: ${{github.event.inputs.envoyTag}}
        distro: ${{matrix.distro}}

  build:
    needs: [metadata, prefetch]
    if: always()
    env:
      BAZEL_BUILD_EXTRA_OPTIONS: >-
        --discard_analysis_cache 
        --nostamp 
        --nouse_action_cache
        --io_nice_level=4
      ENVOY_DEPS_TAR: /tmp/envoy-deps.tar
    strategy:
      fail-fast: false
      matrix:
        allow_failure: [false]
        distro: [alpine, centos]
        pltforrms: [linux/amd64, linux/arm64]
        #mode: [fips, debug, stripped]
        #include / exlcude combinations
    runs-on: 'ubuntu-latest'
    continue-on-error: ${{ matrix.allow_failure }}
    steps:
    
    - name: Inspect
      run: |
        echo "Build Environment:"
        echo "envoyTag: ${{github.event.inputs.envoyTag}}"
        echo "envoyBuildToolsTag: ${{needs.metadata.outputs.ebToolsTag}}"
        
    - uses: actions/checkout@v3

    - name: Maximize build space
      run: |
        if [[ ${{ matrix.distro }} != 'darwin' ]]; then
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo docker system prune -f
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get remove -y '^dotnet-.*'
          sudo apt-get remove -y 'php.*'
          sudo apt-get remove -y '^mongodb-.*'
          sudo apt-get remove -y '^mysql-.*'
          sudo apt-get remove -y azure-cli google-cloud-sdk google-chrome-stable firefox powershell mono-devel
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
          docker system prune -af
        fi

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    - uses: docker/setup-buildx-action@v2
      id: buildx
      with:
        install: true
    
    - name: Login to DockerHub
      if: success()
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.GHA_DOCKERHUB_PUSH_USER }}
        password: ${{ secrets.GHA_KONG_DOCKERHUB_PUSH_TOKEN }}
        
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        push: false
        load: true
        no-cache: ${{github.event.inputs.noBuildxCache}}
        context: .
        file: Dockerfile
        build-args: |
          ENVOY_BUILD_TOOLS_TAG=${{needs.metadata.outputs.ebToolsTag}}
          ENVOY_BUILD_TOOLS_IMAGE_BASE_VARIANT=${{env.ebToolsImgBaseVariant}}
          ENVOY_TAG=${{env.envoyTag}}
          DISTRO=${{env.distro}}
        platforms: ${{matrix.platforms}}
        target: envoy-build
        cache-to: |
          type=registry,mode=max,ref=kong/envoy-builds:envoy-builds-${{github.sha}}-${{env.envoyTag}}-${{env.distro}}
        cache-from: |
          type=registry,ref=kong/envoy-builds:envoy-deps-${{github.sha}}-${{env.envoyTag}} 
          type=registry,ref=kong/envoy-builds:envoy-builds-${{github.sha}}-${{env.envoyTag}}-${{env.distro}}
        tags: ${{env.registry}}/${{env.repo}}:envoy-builds-${{github.sha}}-${{env.envoyTag}}-${{env.distro}}
      env:
        ebToolsImgBaseVariant: ${{matrix.distro == 'darwin' && 'alpine' || matrix.distro}} 
        registry: kong
        repo: envoy-builds
        envoyTag: ${{github.event.inputs.envoyTag}}
        distro: ${{matrix.distro}}

    - uses: jungwinter/split@v2
      id: split
      with:
        msg: ${{matrix.platforms}}
        separatorseparator: '/'

    # Parse os nad arch from platform
    - name: Zip artifact
      run: |
        IMAGE=${{env.registry}}/${{env.repo}}:envoy-builds-${{github.sha}}-${{env.envoyTag}}-${{env.distro}} \
        ENVOY_OUT_DIR=${{env.out_dir}} \
        make envoy_bin
        if [[ -f ${{env.out_dir}}/envoy-${{matrix.distro}} ]]; then  
          tar -C ${{env.out_dir}} -czvf envoy-${{env.envoyTag}}-${{matrix.distro}}-${{env.artifactOS}}-${{env.artifactArch}}.tar.gz .
        fi
      env:
        registry: kong
        repo: envoy-builds
        envoyTag: ${{github.event.inputs.envoyTag}}
        distro: ${{matrix.distro}} 
        artifactOS: ${{ steps.split.outputs._1 }}
        artifactArch: ${{ steps.split.outputs._2 }}
        out_dir: build/artifacts

    - name: Save artifact
      uses: actions/upload-artifact@v3
      id: save_artifacts
      with:
        name: artifacts
        path: |
          envoy-*.tar.gz
