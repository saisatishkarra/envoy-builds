name: CI_Sync_Deps
on: 
  workflow_dispatch:
    inputs:
      envoyTag:
        description: 'envoy tag to build'
        type: string
        required: false
      s3CachePrefix:
        description: 'envoy s3 cache prefix'
        type: string
        default: envoy
jobs:
  metadata:
    runs-on: ubuntu-18.04
    continue-on-error: false
    outputs:
      envoyTag: "${{steps.metadata.outputs.envoyTag}}"
      envoyTagTrimmed: "${{steps.metadata.outputs.envoyTagTrimmed}}"
      envoyTagMajorRelease: "${{steps.metadata.outputs.envoyTagMajorRelease}}"
      envoyTagPatchRelease: "${{steps.metadata.outputs.envoyTagPatchRelease}}"
      buildMetadata: "${{steps.metadata.outputs.buildMetadata}}"
      s3CacheBase: "${{steps.metadata.outputs.s3CacheBase}}"
      releaseTag: "${{steps.metadata.outputs.releaseTag}}"
      isNewRlease: "${{steps.metadata.outputs.isNewRlease}}"
    steps:
    - uses: actions/checkout@v3

    - name: Set Envoy Tag
      id: current_envoy
      if: ${{ github.event_name == 'schedule' || github.event.inputs.envoyTag != ''  }}
      run: |
        if [[ ${{github.event_name}} == 'schedule' ]]; then
          # echo "YTB. Fetch upstream envoy tag and set output"
          echo "::set-output name=envoyTag::v1.22.2"
        elif [[ ${{github.event_name}} == 'workflow_dispatch' ]] && [[ ! -z ${{github.event.inputs.envoyTag}} ]]; then
          echo "::set-output name=envoyTag::${{github.event.inputs.envoyTag}}"
        fi
        echo "::set-output name=envoyBuildSHA::$(git rev-parse --short HEAD)"
        
    
    # ^v(\d+\.\d+\.\d)+(?:(-)([\d\w-]+(?:\.[\d\w-]+)*))?(?:\+[\d\w-]+)?$
    # actions-ecosystem/action-regex-match@v2
    - name: Parse Input Envoy Tag
      uses: release-kit/semver@v1
      id: parse_current_envoy
      with:
        input: '${{steps.current_envoy.outputs.envoyTag}}'
    
    # Check if a release for envoy already exists for matching major.minor version
    - name: Check previous matching released envoy
      uses: cardinalby/git-get-release-action@v1
      id: previous_envoy_release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        releaseNameRegEx: "v${{steps.parse_current_envoy.outputs.major}}.${{steps.parse_current_envoy.outputs.minor}}.*"
        draft: false
        prerelease: false
        doNotFailIfNotFound: true  # If not found, returns empty release id in outputs
    
    - name: Parse previous release envoy tag
      uses: release-kit/semver@v1
      id: parse_previous_envoy
      if: ${{steps.previous_envoy_release.outputs.id != '' }}
      with:
        input: ${{steps.previous_envoy_release.outputs.tag_name}}

    - name: Set Previous Release Metadata 
      if: ${{steps.previous_envoy_release.outputs.id != '' }}
      id: release_type
      run: |
        echo "previous release id: ${{ steps.previous_envoy_release.outputs.id}}"
        echo "previous release name: ${{ steps.previous_envoy_release.outputs.name}}"
        echo "previous release tag: ${{ steps.previous_envoy_release.outputs.tag_name}}"
        echo "previous release createdAt: ${{ steps.previous_envoy_release.outputs.created_at}}"
        if [[ "${{steps.parse_current_envoy.outputs.patch}}" <= "${{steps.parse_previous_envoy.outputs.patch}}" ]]; then
          echo "::set-output name=isNewRlease::false"
        fi

    - name: Set Build Metadata
      id: metadata
      run: |
        echo "::set-output name=envoyTag::${{steps.current_envoy.outputs.envoyTag}}"
        echo "::set-output name=envoyTagTrimmed::${{steps.parse_current_envoy.outputs.full}}"
        echo "::set-output name=envoyTagMajorRelease::${{steps.parse_current_envoy.outputs.major}}.${{steps.parse_current_envoy.outputs.minor}}"
        echo "::set-output name=envoyTagPatchRelease::${{steps.parse_current_envoy.outputs.patch}}"
        echo "::set-output name=s3CacheBase::$(echo "${{github.event.inputs.s3CachePrefix}}/v${{steps.parse_current_envoy.outputs.major}}.${{steps.parse_current_envoy.outputs.minor}}.x")"
        echo "::set-output name=buildMetadata::$(echo "eb.${{steps.current_envoy.outputs.envoyBuildSHA}}")"
        echo "::set-output name=releaseTag::$(echo "${{steps.parse_current_envoy.outputs.full}}+eb.${{steps.current_envoy.outputs.envoyBuildSHA}}")"
        echo "::set-output name=isNewRlease::${{steps.release_type.outputs.isNewRlease == false && steps.release_type.outputs.isNewRlease || true}}"

  build:
    needs: metadata
    strategy:
      # Use to populate base cache for use by any of customized compile options in read-only-mode
      # This will speed up the first run to populate cache for 3 distros in 3 compilation moodes
      # Also reduce cache poisioning
      max-parallel: 9
      fail-fast: false
      matrix:
        distro: [alpine, centos, darwin]
        arch: [amd64]
        bazel_compile_mode: [opt, dbg, fastbuild]
        bazel_compile_options: [""]
        include:
          - distro: alpine
            arch: amd64
            bazel_compile_mode: opt
            bazel_compile_options: "--define boringssl=fips"
          - distro: alpine
            arch: amd64
            bazel_compile_mode: dbg
            bazel_compile_options: "--define boringssl=fips"
    runs-on: ${{ matrix.distro != 'darwin' && 'ubuntu-18.04' || 'macos-latest' }}
    continue-on-error: false
    steps:

    - name: Inspect
      run: |
        echo "Build Environment:"
        echo "envoyTag: ${{needs.metadata.outputs.envoyTag}}"
        echo "envoyTagTrimmed: ${{needs.metadata.outputs.envoyTagTrimmed}}"
        echo "envoyTagMajorRelease: ${{needs.metadata.outputs.envoyTagMajorRelease}}"
        echo "envoyTagPatchRelease: ${{needs.metadata.outputs.envoyTagPatchRelease}}"
        echo "buildMetadata: ${{needs.metadata.outputs.buildMetadata}}"
        echo "s3CacheBase: ${{needs.metadata.outputs.s3CacheBase}}"
        echo "s3CacheKey: ${{needs.metadata.outputs.s3CacheBase}}/${{matrix.bazel_compile_mode}}/${{matrix.distro}}-${{matrix.arch}}"
        echo "releaseTag: ${{needs.metadata.outputs.releaseTag}}"
        echo "isNewRelease: ${{needs.metadata.outputs.isNewRlease}}"
